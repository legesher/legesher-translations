programming_languages:
  afl:
    keywords:
      AND: "AND"
      break: "break"
      case: "case"
      continue: "continue"
      default: "default"
      do: "do"
      else: "else"
      for: "for"
      function: "function"
      global: "global"
      if: "if"
      local: "local"
      NOT: "NOT"
      Null: "Null"
      OR: "OR"
      procedure: "procedure"
      return: "return"
      static: "static"
      switch: "switch"
      typeof: "typeof"
      while: "while"
  agda:
    keywords:
      abstract: "abstract"
      codata: "codata"
      coinductive: "coinductive"
      constructor: "constructor"
      data: "data"
      do: "do"
      eta-equality: "equality"
      field: "field"
      forall: "forall"
      hiding: "hiding"
      import: "import"
      in: "in"
      inductive: "inductive"
      infix: "infix"
      infixl: "infixl"
      infixr: "infixr"
      instance: "instance"
      let: "let"
      macro: "macro"
      module: "module"
      mutual: "mutual"
      no-eta-equality: "equality"
      open: "open"
      overlap: "overlap"
      pattern: "pattern"
      postulate: "postulate"
      primitive: "primitive"
      private: "private"
      public: "public"
      quote: "quote"
      quoteContext: "quoteContext"
      quoteGoal: "quoteGoal"
      quoteTerm: "quoteTerm"
      record: "record"
      renaming: "renaming"
      rewrite: "rewrite"
      Set: "Set"
      syntax: "syntax"
      tactic: "tactic"
      unquote: "unquote"
      unquoteDecl: "unquoteDecl"
      unquoteDef: "unquoteDef"
      using: "using"
      where: "where"
      with: "with"
  bash:
    keywords:
      case: case
      coproc: coproc
      do: do
      done: done
      elif: elif
      else: else
      esac: esac
      fi: fi
      for: for
      function: function
      if: if
      in: in
      select: select
      then: then
      time: time
      until: until
      while: while
  c:
    keywords:
      auto: "auto"
      break: "break"
      case: "case"
      char: "char"
      const: "const"
      continue: "continue"
      default: "default"
      do: "do"
      double: "double"
      else: "else"
      enum: "enum"
      extern: "extern"
      float: "float"
      for: "for"
      goto: "goto"
      if: "if"
      int: "int"
      long: "long"
      register: "register"
      return: "return"
      short: "short"
      signed: "signed"
      sizeof: "sizeof"
      static: "static"
      struct: "struct"
      switch: "switch"
      typedef: "typedef"
      union: "union"
      unsigned: "unsigned"
      void: "void"
      volatile: "volatile"
      while: "while"
  c#:
    keywords:
      abstract: "abstract"
      add: "add"
      alias: "alias"
      as: "as"
      ascending: "ascending"
      async: "async"
      await: "await"
      base: "base"
      bool: "bool"
      break: "break"
      byte: "byte"
      case: "case"
      catch: "catch"
      char: "char"
      checked: "checked"
      class: "class"
      const: "const"
      continue: "continue"
      decimal: "decimal"
      default: "default"
      delegate: "delegate"
      descending: "descending"
      do: "do"
      double: "double"
      dynamic: "dynamic"
      else: "else"
      enum: "enum"
      event: "event"
      explicit: "explicit"
      extern: "extern"
      false: "false"
      finally: "finally"
      fixed: "fixed"
      float: "float"
      for: "for"
      foreach: "foreach"
      from: "from"
      get: "get"
      global: "global"
      goto: "goto"
      group: "group"
      if: "if"
      implicit: "implicit"
      in: "in"
      int: "int"
      interface: "interface"
      internal: "internal"
      into: "into"
      is: "is"
      join: "join"
      let: "let"
      lock: "lock"
      long: "long"
      namespace: "namespace"
      new: "new"
      null: "null"
      object: "object"
      operator: "operator"
      orderby: "orderby"
      out: "out"
      override: "override"
      params: "params"
      partial: "partial"
      private: "private"
      protected: "protected"
      public: "public"
      readonly: "readonly"
      ref: "ref"
      remove: "remove"
      return: "return"
      sbyte: "sbyte"
      sealed: "sealed"
      select: "select"
      set: "set"
      short: "short"
      sizeof: "sizeof"
      stackalloc: "stackalloc"
      static: "static"
      string: "string"
      struct: "struct"
      switch: "switch"
      this: "this"
      throw: "throw"
      true: "true"
      try: "try"
      typeof: "typeof"
      uint: "uint"
      ulong: "ulong"
      unchecked: "unchecked"
      unsafe: "unsafe"
      ushort: "ushort"
      using: "using"
      value: "value"
      var: "var"
      virtual: "virtual"
      void: "void"
      volatile: "volatile"
      where: "where"
      while: "while"
      yield: "yield"
  c++:
    keywords:
      "#define": "#define"
      "#defined": "#defined"
      "#elif": "#elif"
      "#else": "#else"
      "#endif": "#endif"
      "#error": "#error"
      "#if": "#if"
      "#ifdef": "#ifdef"
      "#ifndef": "#ifndef"
      "#include": "#include"
      "#line": "#line"
      "#pragma": "#pragma"
      "#undef": "#undef"
      alignas: "alignas"
      alignof: "alignof"
      and: "and"
      and_eq: "and_eq"
      asm: "asm"
      atomic_cancel: "atomic_cancel"
      atomic_commit: "atomic_commit"
      atomic_noexcept: "atomic_noexcept"
      auto: "auto"
      bitand: "bitand"
      bitor: "bitor"
      bool: "bool"
      break: "break"
      case: "case"
      catch: "catch"
      char: "char"
      char16_t: "char16_t"
      char32_t: "char32_t"
      class: "class"
      compl: "compl"
      concept: "concept"
      const: "const"
      const_cast: "const_cast"
      constexpr: "constexpr"
      continue: "continue"
      decltype: "decltype"
      default: "default"
      delete: "delete"
      do: "do"
      double: "double"
      dynamic_cast: "dynamic_cast"
      else: "else"
      enum: "enum"
      explicit: "explicit"
      export: "export"
      extern: "extern"
      false: "false"
      final: "final"
      float: "float"
      for: "for"
      friend: "friend"
      goto: "goto"
      if: "if"
      import: "import"
      inline: "inline"
      int: "int"
      long: "long"
      module: "module"
      mutable: "mutable"
      namespace: "namespace"
      new: "new"
      noexcept: "noexcept"
      not: "not"
      not_eq: "not_eq"
      nullptr: "nullptr"
      operator: "operator"
      or: "or"
      or_eq: "or_eq"
      override: "override"
      private: "private"
      protected: "protected"
      public: "public"
      register: "register"
      reinterpret_cast: "reinterpret_cast"
      requires: "requires"
      return: "return"
      short: "short"
      signed: "signed"
      sizeof: "sizeof"
      static: "static"
      static_assert: "static_assert"
      static_cast: "static_cast"
      struct: "struct"
      switch: "switch"
      synchronized: "synchronized"
      template: "template"
      this: "this"
      thread_local: "thread_local"
      throw: "throw"
      transaction_safe: "transaction_safe"
      transaction_safe_dynamic: "transaction_safe_dynamic"
      true: "true"
      try: "try"
      typedef: "typedef"
      typeid: "typeid"
      typename: "typename"
      union: "union"
      unsigned: "unsigned"
      using: "using"
      virtual: "virtual"
      void: "void"
      volatile: "volatile"
      wchar_t: "wchar_t"
      while: "while"
      xor: "xor"
      xor_eq: "xor_eq"
  css:
    keywords:
      "@charset": "@charset"
      "@font-face": "@font-face"
      "@font-values": "@font-values"
      "@import": "@import"
      "@keyframes": "@keyframes"
      "@media": "@media"
      align-content: align-content
      align-items: align-items
      align-self: align-self
      all: all
      animation: animation
      animation-count: animation-count
      animation-delay: animation-delay
      animation-direction: animation-direction
      animation-duration: animation-duration
      animation-function: animation-function
      animation-mode: animation-mode
      animation-name: animation-name
      animation-state: animation-state
      backface-visibility: backface-visibility
      background: background
      background-attachment: background-attachment
      background-clip: background-clip
      background-color: background-color
      background-image: background-image
      background-mode: background-mode
      background-origin: background-origin
      background-position: background-position
      background-repeat: background-repeat
      background-size: background-size
      border: border
      border-bottom: border-bottom
      border-collapse: border-collapse
      border-color: border-color
      border-image: border-image
      border-left: border-left
      border-outset: border-outset
      border-radius: border-radius
      border-repeat: border-repeat
      border-right: border-right
      border-slice: border-slice
      border-source: border-source
      border-spacing: border-spacing
      border-style: border-style
      border-top: border-top
      border-width: border-width
      bottom: bottom
      box-break: box-break
      box-shadow: box-shadow
      box-sizing: box-sizing
      break-after: break-after
      break-before: break-before
      break-inside: break-inside
      caption-side: caption-side
      caret-color: caret-color
      clear: clear
      clip: clip
      color: color
      column-color: column-color
      column-count: column-count
      column-fill: column-fill
      column-gap: column-gap
      column-rule: column-rule
      column-span: column-span
      column-style: column-style
      column-width: column-width
      columns: columns
      content: content
      counter-increment: counter-increment
      counter-reset: counter-reset
      cursor: cursor
      direction: direction
      display: display
      empty-cells: empty-cells
      filter: filter
      flex: flex
      flex-basis: flex-basis
      flex-direction: flex-direction
      flex-flow: flex-flow
      flex-grow: flex-grow
      flex-shrink: flex-shrink
      flex-wrap: flex-wrap
      float: float
      font: font
      font-adjust: font-adjust
      font-alternates: font-alternates
      font-asian: font-asian
      font-caps: font-caps
      font-family: font-family
      font-kerning: font-kerning
      font-ligatures: font-ligatures
      font-numeric: font-numeric
      font-override: font-override
      font-position: font-position
      font-settings: font-settings
      font-size: font-size
      font-stretch: font-stretch
      font-style: font-style
      font-synthesis: font-synthesis
      font-variant: font-variant
      font-weight: font-weight
      grid: grid
      grid-area: grid-area
      grid-areas: grid-areas
      grid-column: grid-column
      grid-columns: grid-columns
      grid-end: grid-end
      grid-flow: grid-flow
      grid-gap: grid-gap
      grid-row: grid-row
      grid-rows: grid-rows
      grid-start: grid-start
      grid-template: grid-template
      hanging-punctuation: hanging-punctuation
      height: height
      hyphens: hyphens
      image-rendering: image-rendering
      isolation: isolation
      justify-content: justify-content
      left: left
      letter-spacing: letter-spacing
      line-break: line-break
      line-height: line-height
      list-image: list-image
      list-position: list-position
      list-style: list-style
      list-type: list-type
      margin: margin
      margin-bottom: margin-bottom
      margin-left: margin-left
      margin-right: margin-right
      margin-top: margin-top
      max-height: max-height
      max-width: max-width
      min-height: min-height
      min-width: min-width
      mix-mode: mix-mode
      object-fit: object-fit
      object-position: object-position
      opacity: opacity
      order: order
      orphans: orphans
      outline: outline
      outline-color: outline-color
      outline-offset: outline-offset
      outline-style: outline-style
      outline-width: outline-width
      overflow: overflow
      overflow-wrap: overflow-wrap
      overflow-x: overflow-x
      overflow-y: overflow-y
      padding: padding
      padding-bottom: padding-bottom
      padding-left: padding-left
      padding-right: padding-right
      padding-top: padding-top
      page-after: page-after
      page-before: page-before
      page-inside: page-inside
      perspective: perspective
      perspective-origin: perspective-origin
      pointer-events: pointer-events
      position: position
      quotes: quotes
      resize: resize
      right: right
      scroll-behavior: scroll-behavior
      Specifies: Specifies
      tab-size: tab-size
      table-layout: table-layout
      text-align: text-align
      text-color: text-color
      text-decoration: text-decoration
      text-indent: text-indent
      text-justify: text-justify
      text-last: text-last
      text-line: text-line
      text-orientation: text-orientation
      text-overflow: text-overflow
      text-position: text-position
      text-shadow: text-shadow
      text-style: text-style
      text-transform: text-transform
      text-upright: text-upright
      top: top
      transform: transform
      transform-origin: transform-origin
      transform-style: transform-style
      transition: transition
      transition-delay: transition-delay
      transition-duration: transition-duration
      transition-function: transition-function
      transition-property: transition-property
      unicode-bidi: unicode-bidi
      user-select: user-select
      vertical-align: vertical-align
      visibility: visibility
      white-space: white-space
      widows: widows
      width: width
      word-break: word-break
      word-spacing: word-spacing
      word-wrap: word-wrap
      writing-mode: writing-mode
      z-index: z-index
  golang:
    keywords:
      break: "break"
      case: "case"
      chan: "chan"
      const: "const"
      continue: "continue"
      default: "default"
      defer: "defer"
      else: "else"
      fallthrough: "fallthrough"
      for: "for"
      func: "func"
      go: "go"
      goto: "goto"
      if: "if"
      import: "import"
      interface: "interface"
      map: "map"
      package: "package"
      range: "range"
      return: "return"
      select: "select"
      struct: "struct"
      switch: "switch"
      type: "type"
      var: "var"
  haskell:
    keywords:
      as: as
      case: case
      class: class
      data: data
      data family: data family
      data instance: data instance
      default: default
      deriving: deriving
      deriving instance: deriving instance
      do: do
      else: else
      forall: forall
      foreign: foreign
      hiding: hiding
      if: if
      import: import
      in: in
      infix: infix
      infixl: infixl
      infixr: infixr
      instance: instance
      let: let
      mdo: mdo
      module: module
      newtype: newtype
      of: of
      proc: proc
      qualified: qualified
      rec: rec
      then: then
      type: type
      type family: type family
      type instance: type instance
      where: where
  html:
    keywords:
      "!DOCTYPE": "!DOCTYPE"
      a: a
      abbr: abbr
      acronym: acronym
      address: address
      applet: applet
      area: area
      article: article
      aside: aside
      audio: audio
      b: b
      base: base
      basefont: basefont
      bdi: bdi
      bdo: bdo
      big: big
      blockquote: blockquote
      body: body
      br: br
      button: button
      canvas: canvas
      caption: caption
      center: center
      cite: cite
      code: code
      col: col
      colgroup: colgroup
      data: data
      datalist: datalist
      dd: dd
      del: del
      details: details
      dfn: dfn
      dialog: dialog
      dir: dir
      div: div
      dl: dl
      dt: dt
      em: em
      embed: embed
      fieldset: fieldset
      figcaption: figcaption
      figure: figure
      font: font
      footer: footer
      form: form
      frame: frame
      frameset: frameset
      h1: h1
      head: head
      header: header
      hr: hr
      html: html
      i: i
      iframe: iframe
      img: img
      input: input
      ins: ins
      kbd: kbd
      label: label
      legend: legend
      li: li
      link: link
      main: main
      map: map
      mark: mark
      meta: meta
      meter: meter
      nav: nav
      noframes: noframes
      noscript: noscript
      object: object
      ol: ol
      optgroup: optgroup
      option: option
      output: output
      p: p
      param: param
      picture: picture
      pre: pre
      progress: progress
      q: q
      rp: rp
      rt: rt
      ruby: ruby
      s: s
      samp: samp
      script: script
      section: section
      select: select
      small: small
      source: source
      span: span
      strike: strike
      strong: strong
      style: style
      sub: sub
      summary: summary
      sup: sup
      svg: svg
      table: table
      tbody: tbody
      td: td
      template: template
      textarea: textarea
      tfoot: tfoot
      th: th
      thead: thead
      time: time
      title: title
      tr: tr
      track: track
      tt: tt
      u: u
      ul: ul
      var: var
      video: video
      wbr: wbr
  java:
    keywords:
      _: "_"
      abstract: "abstract"
      assert: "assert"
      boolean: "boolean"
      break: "break"
      byte: "byte"
      case: "case"
      catch: "catch"
      char: "char"
      class: "class"
      const: "const"
      continue: "continue"
      default: "default"
      do: "do"
      double: "double"
      else: "else"
      enum: "enum"
      extends: "extends"
      final: "final"
      finally: "finally"
      float: "float"
      for: "for"
      goto: "goto"
      if: "if"
      implements: "implements"
      import: "import"
      instanceof: "instanceof"
      int: "int"
      interface: "interface"
      long: "long"
      native: "native"
      new: "new"
      package: "package"
      private: "private"
      protected: "protected"
      public: "public"
      return: "return"
      short: "short"
      static: "static"
      strictfp: "strictfp"
      super: "super"
      switch: "switch"
      synchronized: "synchronized"
      this: "this"
      throw: "throw"
      throws: "throws"
      transient: "transient"
      try: "try"
      void: "void"
      volatile: "volatile"
      while: "while"
  javascript:
    keywords:
      arguments: "arguments"
      await: "await"
      break: "break"
      case: "case"
      catch: "catch"
      class: "class"
      const: "const"
      continue: "continue"
      debugger: "debugger"
      default: "default"
      delete: "delete"
      do: "do"
      else: "else"
      enum: "enum"
      eval: "eval"
      export: "export"
      extends: "extends"
      false: "false"
      finally: "finally"
      for: "for"
      from: "from"
      function: "function"
      if: "if"
      implements: "implements"
      import: "import"
      in: "in"
      instanceof: "instanceof"
      interface: "interface"
      let: "let"
      new: "new"
      null: "null"
      package: "package"
      private: "private"
      protected: "protected"
      public: "public"
      return: "return"
      static: "static"
      super: "super"
      switch: "switch"
      this: "this"
      throw: "throw"
      true: "true"
      try: "try"
      typeof: "typeof"
      var: "var"
      void: "void"
      while: "while"
      with: "with"
      yield: "yield"
  jsdoc:
    keywords:
      "@abstract": "@abstract"
      "@access": "@access"
      "@alias": "@alias"
      "@async": "@async"
      "@augments": "@augments"
      "@author": "@author"
      "@borrows": "@borrows"
      "@callback": "@callback"
      "@class": "@class"
      "@classdesc": "@classdesc"
      "@constant": "@constant"
      "@constructs": "@constructs"
      "@copyright": "@copyright"
      "@default": "@default"
      "@deprecated": "@deprecated"
      "@description": "@description"
      "@enum": "@enum"
      "@event": "@event"
      "@example": "@example"
      "@exports": "@exports"
      "@external": "@external"
      "@file": "@file"
      "@fires": "@fires"
      "@function": "@function"
      "@generator": "@generator"
      "@global": "@global"
      "@hideconstructor": "@hideconstructor"
      "@ignore": "@ignore"
      "@implements": "@implements"
      "@inheritdoc": "@inheritdoc"
      "@inner": "@inner"
      "@instance": "@instance"
      "@interface": "@interface"
      "@kind": "@kind"
      "@lends": "@lends"
      "@license": "@license"
      "@listens": "@listens"
      "@member": "@member"
      "@memberof": "@memberof"
      "@mixes": "@mixes"
      "@mixin": "@mixin"
      "@module": "@module"
      "@name": "@name"
      "@namespace": "@namespace"
      "@override": "@override"
      "@package": "@package"
      "@param": "@param"
      "@private": "@private"
      "@property": "@property"
      "@protected": "@protected"
      "@public": "@public"
      "@readonly": "@readonly"
      "@requires": "@requires"
      "@returns": "@returns"
      "@see": "@see"
      "@since": "@since"
      "@static": "@static"
      "@summary": "@summary"
      "@this": "@this"
      "@throws": "@throws"
      "@todo": "@todo"
      "@tutorial": "@tutorial"
      "@type": "@type"
      "@typedef": "@typedef"
      "@variation": "@variation"
      "@version": "@version"
      "@yields": "@yields"
      "{@link}": "{@link}"
      "{@tutorial}": "{@tutorial}"
  json:
    keywords:
      $comment: $comment
      $id: $id
      $ref: $ref
      $schema: $schema
  julia:
    keywords:
      abstract: abstract
      baremodule: baremodule
      begin: begin
      bitstype: bitstype
      break: break
      catch: catch
      const: const
      continue: continue
      do: do
      else: else
      end: end
      export: export
      false: false
      finally: finally
      for: for
      function: function
      global: global
      if: if
      immutable: immutable
      import: import
      importall: importall
      let: let
      local: local
      macro: macro
      module: module
      quote: quote
      return: return
      struct: struct
      true: true
      try: try
      type: type
      typealias: typealias
      using: using
      while: while
  node:
    keywords:
      __dirname: __dirname
      __filename: __filename
      exports: exports
      module: module
      require: require
  ocaml:
    keywords:
      and: and
      as: as
      asr: asr
      assert: assert
      begin: begin
      class: class
      constraint: constraint
      do: do
      done: done
      downto: downto
      else: else
      end: end
      exception: exception
      external: external
      false: false
      for: for
      fun: fun
      function: function
      functor: functor
      if: if
      in: in
      include: include
      inherit: inherit
      initializer: initializer
      land: land
      lazy: lazy
      let: let
      lor: lor
      lsl: lsl
      lsr: lsr
      lxor: lxor
      match: match
      method: method
      mod: mod
      module: module
      mutable: mutable
      new: new
      nonrec: nonrec
      object: object
      of: of
      open: open
      or: or
      private: private
      rec: rec
      sig: sig
      struct: struct
      then: then
      to: to
      true: true
      try: try
      type: type
      val: val
      virtual: virtual
      when: when
      while: while
      with: with
  php:
    keywords:
      __CLASS__: __CLASS__
      __DIR__: __DIR__
      __FILE__: __FILE__
      __FUNCTION__: __FUNCTION__
      __halt_compiler: __halt_compiler
      __LINE__: __LINE__
      __METHOD__: __METHOD__
      __NAMESPACE__: __NAMESPACE__
      __TRAIT__: __TRAIT__
      abstract: abstract
      and: and
      array: array
      as: as
      break: break
      callable: callable
      case: case
      catch: catch
      class: class
      clone: clone
      const: const
      continue: continue
      declare: declare
      default: default
      die: die
      do: do
      echo: echo
      else: else
      elseif: elseif
      empty: empty
      enddeclare: enddeclare
      endfor: endfor
      endforeach: endforeach
      endif: endif
      endswitch: endswitch
      endwhile: endwhile
      eval: eval
      exit: exit
      extends: extends
      final: final
      for: for
      foreach: foreach
      function: function
      global: global
      goto: goto
      if: if
      implements: implements
      include: include
      include_once: include_once
      instanceof: instanceof
      insteadof: insteadof
      interface: interface
      isset: isset
      list: list
      namespace: namespace
      new: new
      or: or
      print: print
      private: private
      protected: protected
      public: public
      require: require
      require_once: require_once
      return: return
      static: static
      switch: switch
      throw: throw
      trait: trait
      try: try
      unset: unset
      use: use
      var: var
      while: while
      xor: xor
  python:
    builtin_functions:
      __import__: __import__
      abs: abs
      all: all
      any: any
      ascii: ascii
      bin: bin
      bool: bool
      breakpoint: breakpoint
      bytearray: bytearray
      bytes: bytes
      callable: callable
      chr: chr
      classmethod: classmethod
      compile: compile
      complex: complex
      delattr: delattr
      dict: dict
      dir: dir
      divmod: divmod
      enumerate: enumerate
      eval: eval
      exec: exec
      filter: filter
      float: float
      format: format
      frozenset: frozenset
      getattr: getattr
      globals: globals
      hasattr: hasattr
      hash: hash
      help: help
      hex: hex
      id: id
      input: input
      int: int
      isinstance: isinstance
      issubclass: issubclass
      iter: iter
      len: len
      list: list
      locals: locals
      map: map
      max: max
      memoryview: memoryview
      min: min
      next: next
      object: object
      oct: oct
      open: open
      ord: ord
      pow: pow
      print: print
      property: property
      range: range
      repr: repr
      reversed: reversed
      round: round
      set: set
      setattr: setattr
      slice: slice
      sorted: sorted
      staticmethod: staticmethod
      str: str
      sum: sum
      super: super
      tuple: tuple
      type: type
      vars: vars
      zip: zip
    keywords:
      and: "and"
      as: "as"
      assert: "assert"
      async: "async"
      await: "await"
      break: "break"
      class: "class"
      continue: "continue"
      def: "def"
      del: "del"
      elif: "elif"
      else: "else"
      except: "except"
      False: "False"
      finally: "finally"
      for: "for"
      from: "from"
      global: global
      if: "if"
      import: "import"
      in: "in"
      is: "is"
      lambda: "lambda"
      None: "None"
      nonlocal: "nonlocal"
      not: "not"
      or: "or"
      pass: "pass"
      raise: "raise"
      return: "return"
      True: "True"
      try: "try"
      while: "while"
      with: "with"
      yield: "yield"
  razor:
    keywords:
      "@case": "@case"
      "@catch": "@catch"
      "@default": "@default"
      "@do": "@do"
      "@else": "@else"
      "@finally": "@finally"
      "@for": "@for"
      "@foreach": "@foreach"
      "@if": "@if"
      "@lock": "@lock"
      "@switch": "@switch"
      "@try": "@try"
      "@using": "@using"
      "@while": "@while"
      functions: functions
      helper: helper
      inherits: inherits
      model: model
      namespace: namespace
      page: page
      section: section
  regex:
    keywords:
  ruby:
    keywords:
      alias: "alias"
      and: "and"
      begin: "begin"
      break: "break"
      case: "case"
      class: "class"
      def: "def"
      defined?: ""
      do: "do"
      else: "else"
      elsif: "elsif"
      end: "end"
      ensure: "ensure"
      false: "false"
      for: "for"
      if: "if"
      in: "in"
      module: "module"
      next: "next"
      nil: "nil"
      not: "not"
      or: "or"
      redo: "redo"
      rescue: "rescue"
      retry: "retry"
      return: "return"
      self: "self"
      super: "super"
      then: "then"
      true: "true"
      undef: "undef"
      unless: "unless"
      until: "until"
      when: "when"
      while: "while"
      yield: "yield"
  rust:
    keywords:
      _: "_"
      abstract: "abstract"
      alignof: "alignof"
      as: "as"
      become: "become"
      box: "box"
      break: "break"
      const: "const"
      continue: "continue"
      crate: "crate"
      do: "do"
      else: "else"
      enum: "enum"
      extern: "extern"
      false: "false"
      final: "final"
      fn: "fn"
      for: "for"
      if: "if"
      impl: "impl"
      in: "in"
      let: "let"
      loop: "loop"
      macro: "macro"
      match: "match"
      mod: "mod"
      move: "move"
      mut: "mut"
      offsetof: "offsetof"
      override: "override"
      priv: "priv"
      proc: "proc"
      pub: "pub"
      pure: "pure"
      ref: "ref"
      return: "return"
      self: "self"
      Self: "Self"
      sizeof: "sizeof"
      static: "static"
      struct: "struct"
      super: "super"
      trait: "trait"
      true: "true"
      type: "type"
      typeof: "typeof"
      unsafe: "unsafe"
      unsized: "unsized"
      use: "use"
      virtual: "virtual"
      where: "where"
      while: "while"
      yield: "yield"
  scala:
    keywords:
      abstract: "abstract"
      case: "case"
      catch: "catch"
      class: "class"
      def: "def"
      do: "do"
      else: "else"
      extends: "extends"
      false: "false"
      final: "final"
      finally: "finally"
      for: "for"
      forSome: "forSome"
      if: "if"
      implicit: "implicit"
      import: "import"
      lazy: "lazy"
      macro: "macro"
      match: "match"
      new: "new"
      null: "null"
      object: "object"
      override: "override"
      package: "package"
      private: "private"
      protected: "protected"
      return: "return"
      sealed: "sealed"
      super: "super"
      this: "this"
      throw: "throw"
      trait: "trait"
      true: "true"
      try: "try"
      type: "type"
      val: "val"
      var: "var"
      while: "while"
      with: "with"
      yield: "yield"
  swift:
    keywords:
      as: "as"
      associatedtype: "associatedtype"
      associativity: "associativity"
      break: "break"
      case: "case"
      catch: "catch"
      class: "class"
      continue: "continue"
      convenience: "convenience"
      default: "default"
      defer: "defer"
      deinit: "deinit"
      didSet: "didSet"
      do: "do"
      dynamic: "dynamic"
      dynamicType: "dynamicType"
      else: "else"
      enum: "enum"
      extension: "extension"
      fallthrough: "fallthrough"
      false: "false"
      final: "final"
      for: "for"
      func: "func"
      get: "get"
      guard: "guard"
      if: "if"
      import: "import"
      in: "in"
      indirect: "indirect"
      infix: "infix"
      init: "init"
      inout: "inout"
      internal: "internal"
      is: "is"
      lazy: "lazy"
      left: "left"
      let: "let"
      mutating: "mutating"
      nil: "nil"
      none: "none"
      nonmutating: "nonmutating"
      operator: "operator"
      optional: "optional"
      override: "override"
      postfix: "postfix"
      precedence: "precedence"
      prefix: "prefix"
      private: "private"
      protocol: "protocol"
      Protocol: "Protocol"
      "#column": "#column"
      "#file": "#file"
      "#function": "#function"
      "#line": "#line"
      "#available": "#available"
      "#else": "#else"
      "#elseif": "#elseif"
      "#endif": "#endif"
      "#if": "#if"
      "#selector": "#selector"
      public: "public"
      repeat: "repeat"
      required: "required"
      rethrows: "rethrows"
      return: "return"
      right: "right"
      self: "self"
      Self: "Self"
      set: "set"
      static: "static"
      struct: "struct"
      subscript: "subscript"
      super: "super"
      switch: "switch"
      throw: "throw"
      throws: "throws"
      true: "true"
      try: "try"
      Type: "Type"
      typealias: "typealias"
      unowned: "unowned"
      var: "var"
      weak: "weak"
      where: "where"
      while: "while"
      willSet: "willSet"
  typescript:
    keywords:
      any: any
      as: as
      boolean: boolean
      break: break
      case: case
      catch: catch
      class: class
      const: const
      constructor: constructor
      continue: continue
      debugger: debugger
      declare: declare
      default: default
      delete: delete
      do: do
      else: else
      enum: enum
      export: export
      extends: extends
      false: false
      finally: finally
      for: for
      from: from
      function: function
      get: get
      if: if
      implements: implements
      import: import
      in: in
      instanceof: instanceof
      interface: interface
      let: let
      module: module
      new: new
      null: null
      number: number
      of: of
      package: package
      private: private
      protected: protected
      public: public
      require: require
      return: return
      set: set
      static: static
      string: string
      super: super
      switch: switch
      symbol: symbol
      this: this
      throw: throw
      true: true
      try: try
      type: type
      typeof: typeof
      var: var
      void: void
      while: while
      with: with
      yield: yield
  universal:
    keywords:
      BROKEN: BROKEN
      BUG: BUG
      CHGME: "CHGME"
      DEBUG: "DEBUG"
      DEPRECATED: "DEPRECATED"
      ERR: "ERR"
      ERROR: "ERROR"
      HACK: "HACK"
      IDEA: "IDEA"
      INFO: "INFO"
      NOTE: "NOTE"
      NOTREACHED: "NOTREACHED"
      OPTIMIZE: "OPTIMIZE"
      REFACTOR: "REFACTOR"
      REMOVE: "REMOVE"
      REVIEW: "REVIEW"
      TASK: "TASK"
      TODO: "TODO"
      UNDONE: "UNDONE"
      WARN: "WARN"
      WARNING: "WARNING"
  verilog:
    keywords:
      always: always
      and: and
      assign: assign
      begin: begin
      buf: buf
      bufif0: bufif0
      bufif1: bufif1
      case: case
      casex: casex
      casez: casez
      cmos: cmos
      deassign: deassign
      default: default
      defparam: defparam
      disable: disable
      edge: edge
      else: else
      end: end
      endcase: endcase
      endfunction: endfunction
      endmodule: endmodule
      endprimitive: endprimitive
      endspecify: endspecify
      endtable: endtable
      endtask: endtask
      event: event
      for: for
      force: force
      forever: forever
      fork: fork
      function: function
      highz0: highz0
      highz1: highz1
      if: if
      initial: initial
      inout: inout
      input: input
      integer: integer
      join: join
      large: large
      macromodule: macromodule
      medium: medium
      module: module
      nand: nand
      negedge: negedge
      nmos: nmos
      nor: nor
      not: not
      notif0: notif0
      notif1: notif1
      or: or
      output: output
      pmos: pmos
      posedge: posedge
      primitive: primitive
      pull0: pull0
      pull1: pull1
      pulldown: pulldown
      pullup: pullup
      rcmos: rcmos
      reg: reg
      release: release
      repeat: repeat
      rnmos: rnmos
      rpmos: rpmos
      rtran: rtran
      rtranif0: rtranif0
      rtranif1: rtranif1
      scalared: scalared
      small: small
      specify: specify
      specparam: specparam
      strong0: strong0
      strong1: strong1
      supply0: supply0
      supply1: supply1
      table: table
      task: task
      time: time
      tran: tran
      tranif0: tranif0
      tranif1: tranif1
      tri: tri
      tri0: tri0
      tri1: tri1
      triand: triand
      trior: trior
      vectored: vectored
      wait: wait
      wand: wand
      weak0: weak0
      weak1: weak1
      while: while
      wire: wire
      wor: wor
      xnor: xnor
      xor: xor
